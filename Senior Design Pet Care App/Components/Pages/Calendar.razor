@page "/calendar"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using Senior_Design_Pet_Care_App.Data
@using Senior_Design_Pet_Care_App.Entities
@using Senior_Design_Pet_Care_App.Services
@inject ApplicationDbContext Db
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<h3>Calendar</h3>

<div class="calendar-container">
    <div class="calendar-header mb-2">
        <button class="btn btn-sm btn-secondary me-2" @onclick="PreviousMonth">←</button>
        <strong>@CurrentMonth.ToString("MMMM yyyy")</strong>
        <button class="btn btn-sm btn-secondary ms-2" @onclick="NextMonth">→</button>
    </div>

    <div class="calendar-grid">
        @foreach (var dayName in DayNames)
        {
            <div class="calendar-day-header">@dayName</div>
        }

        @for (int i = 0; i < FirstDayOffset; i++)
        {
            <div class="calendar-day empty"></div>
        }

        @for (int day = 1; day <= DaysInMonth; day++)
        {
            var date = new DateTime(CurrentMonth.Year, CurrentMonth.Month, day);
            <div class="calendar-day" @onclick="() => GoToDay(date)">
                <div class="date-number">@day</div>

                @if (Events.TryGetValue(date.Date, out var list))
                {
                    foreach (var ev in list.OrderBy(r => r.RemindAt.TimeOfDay))
                    {
                        <div class="event" title="@ev.Description">
                            @ev.Title
                        </div>
                    }
                }
            </div>
        }
    </div>
</div>

@code {
    private DateTime CurrentMonth { get; set; } = DateTime.Today;
    private Dictionary<DateTime, List<Reminder>> Events { get; set; } = new();
    private string[] DayNames = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;
    private int DaysInMonth => DateTime.DaysInMonth(CurrentMonth.Year, CurrentMonth.Month);
    private int FirstDayOffset => (int)new DateTime(CurrentMonth.Year, CurrentMonth.Month, 1).DayOfWeek;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserRemindersAsync();
    }

    private void PreviousMonth() => CurrentMonth = CurrentMonth.AddMonths(-1);
    private void NextMonth() => CurrentMonth = CurrentMonth.AddMonths(1);

    private void GoToDay(DateTime date)
    {
        var dayString = date.ToString("yyyy-MM-dd");
        NavigationManager.NavigateTo($"/dailyreminders/{dayString}");
    }

    private async Task LoadUserRemindersAsync()
    {
        Events.Clear();

        var email = AuthService.CurrentUser?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value
                    ?? AuthService.CurrentUser?.Identity?.Name;

        if (string.IsNullOrWhiteSpace(email)) return;

        var user = await Db.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Email.ToLower() == email.ToLower());
        if (user == null) return;

        var reminders = await Db.Reminders.AsNoTracking().Where(r => r.UserId == user.Id).ToListAsync();

        foreach (var r in reminders)
        {
            var key = r.RemindAt.Date;
            if (!Events.ContainsKey(key)) Events[key] = new List<Reminder>();
            Events[key].Add(r);
        }
    }
}
